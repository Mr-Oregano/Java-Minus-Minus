USE_LR_PARSER

(* Grammar for the Java Minus Minus language 
    Authors:
        Klim Fedorchuk
        Dylan Keefer
        Connor Peterson
        Chaz Brock
*)

statementList

<statementList> ::= | <statement> <statementList> .

<statement> ::= <openStatement> | <closedStatement> .

<openStatement> ::= "if" "(" <expr> ")" <statement>
                  | "if" "(" <expr> ")" <closedStatement> "else" <openStatement> 
                  | "while" "(" <expr> ")" <openStatement> 
                  | "for" "(" <forInit> ";" <expr> ";" <assignment> ")" <openStatement> .

<closedStatement> ::= "if" "(" <expr> ")" <closedStatement> "else" <closedStatement> 
                    | "while" "(" <expr> ")" <closedStatement>
                    | "for" "(" <forInit> ";" <expr> ";" <assignment> ")" <closedStatement>
                    | <simpleStatement> .

<simpleStatement> ::= <block> 
                    | <assignment> ";"
                    | <init> ";"
                    | <decl> ";" 
                    | "print" "(" <expr> ")" ";"
                    | ";" .

(* Basic Statements *)

<assignment> ::= IDENTIFIER "=" <expr> | <decoratedID> .

<init> ::= "bool" IDENTIFIER "=" <expr> | "int" IDENTIFIER "=" <expr> .

<decl> ::= "bool" IDENTIFIER | "int" IDENTIFIER .

<block> ::= "{" <statementList> "}" .

(* Basic Loops *)

<forInit> ::= <assignment> | <init> .

(* Basic Expressions *)

<expr> ::= <expr> "or" <andExpr> | <andExpr> .
<andExpr> ::= <andExpr> "and" <equalExpr> | <equalExpr> .

<equalExpr> ::= <equalExpr> "==" <relExpr> 
              | <equalExpr> "!=" <relExpr> 
              | <relExpr> .

<relExpr> ::= <relExpr> "<" <sumExpr> 
            | <relExpr> ">" <sumExpr> 
            | <sumExpr> .

<sumExpr> ::= <sumExpr> "+" <mulExpr> 
            | <sumExpr> "-" <mulExpr> 
            | <mulExpr> .

<mulExpr> ::= <mulExpr> "*" <unaryExpr> 
            | <mulExpr> "/" <unaryExpr>
            | <mulExpr> "%" <unaryExpr>
            | <unaryExpr> .

<unaryExpr> ::= "abs" <unaryExpr> 
              | "not" <unaryExpr> 
              | "~" <unaryExpr> 
              | <expExpr> .

<expExpr> ::= <factor> "^" <expExpr> | <factor> .

<factor> ::= IDENTIFIER 
           | "true"
           | "false" 
           | INT_LITERAL 
           | "(" <expr> ")" 
           | <decoratedID> .

<decoratedID> ::= "++" IDENTIFIER 
          | "--" IDENTIFIER
          | IDENTIFIER "++"
          | IDENTIFIER "--" .