USE_LR_PARSER

(* Grammar for the Java Minus Minus language 
	Authors:
		Klim Fedorchuk
		Dylan Keefer
		Connor Peterson
		Chaz Brock
*)

statementList

<statementList> ::= | <statement> <statementList> .

<statement> ::= <incExpr> ";" 
			  | <block> 
			  | <assignment> ";"
			  | <decl> ";" 
			  | "if" "(" <expr> ")" <block> 
			  | "if" "(" <expr> ")" <block> "else" <block>			
			  | <whileLoop>
			  | <forLoop>
			  | "print" "(" <expr> ")" ";"
			  | ";" .

(* Basic Statements *)
<assignment> ::= IDENTIFIER "=" <expr> .

<decl> ::= "bool" IDENTIFIER | "int" IDENTIFIER .

<block> ::= "{" <statementList> "}" .

(* Basic loops *)
<whileLoop> ::= "while" "(" <expr> ")" <block> .

<forLoop> ::= "for" "(" <forInit> ";" <forCond> ";" <forIter> ")" <block> .
<forInit> ::= <assignment> .
<forCond> ::= <expr> .
<forIter> ::= <assignment> | <incExpr> .

(* Basic Expressions *)

<expr> ::= <orExpr> | <incExpr> .

<incExpr> ::= <incOp> <mutable> | <mutable> <incOp> .
<incOp> ::= "++" | "--".

<orExpr> ::= <orExpr> "or" <andExpr> | <andExpr> .
<andExpr> ::= <andExpr> "and" <notExpr> | <notExpr> .
<notExpr> ::= "not" <notExpr> | <relExpr> .					

<relExpr> ::= <relExpr> <relOp> <absExpr> | <absExpr> .
<relOp> ::= "<" | ">" | "==" | "!=" .

<absExpr> ::=  "abs" <absExpr> | <sumExpr> .

<sumExpr> ::= <sumExpr> <addOp> <mulExpr> | <mulExpr> .
<addOp> ::= "+" | "-" .

<mulExpr> ::= <mulExpr> <mulOp> <unaryExpr> | <unaryExpr> .
<mulOp> ::= "*" | "/" | "%" .

(* We DO NOT want to allow ~~5 expressions to exist 
   so <unaryExpr> will be forced to resolve to <expExpr> for all paths. *)
<unaryExpr> ::= "~" <expExpr> | <expExpr> .

<expExpr> ::= <factor> "^" <expExpr> | <factor> .

<factor> ::= <mutable> | <immutable> .

<mutable> ::= IDENTIFIER .
<immutable> ::= "true" | "false" | INT_LITERAL | "(" <expr> ")" . 
(* We may reduce to "(" <orExpr> ")" instead to disallow expressions like
   (++5) - 3 to be part of the language. *)